using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SymulatorLotniska.Planes;
using SymulatorLotniska.OperationManagement;
using SymulatorLotniska.AirportManagement;
using SymulatorLotniska.NotificationManagement;

namespace SymulatorLotniska.Operations
{
    /*
        - wykonuje swoje zadania co określony interwał zegara
        Zadania:
            samoloty przebywające w przestrzeni lotniczej
                - odsyła jeżeli są rozładowane
                - próbuje wylądować jeżeli są nie rozładowane
            samoloty na pasie startowym
                - startuje, jesli sa przed startem i jest rozladowany
                - rozladowuje, jesli sa po wyladowaniu i nie sa rozladowane
                - wklada do hangaru, jesli sa po wyladowaniu i sa rozladowane
            samoloty w hangarze
                - rozpoczyna operacje tankowania -> kontroli -> wystawia na pas
                
    */
    class OperationAssistant : IOperation
    {
        private int intervalTimer;

        public OperationAssistant()
        { }

        public override bool execute()
        {
            if (++intervalTimer < Constants.intervalAssistant) return true;
            intervalTimer = 0;
            
            foreach(Plane plane in AirportManager.getInstance().getHangar().getList())
            {
                if (!plane.isAutoGenerated()) continue;
                if (plane.getCurrentState() != State.Hangar) continue;

                if (!plane.isEmpty())
                {
                    if (plane is PassengerPlane)
                        AirportManager.getInstance().unloadPeopleOperation(plane);
                    else if (plane is TransportPlane)
                        AirportManager.getInstance().unloadCargoOperation(plane);
                    else
                        AirportManager.getInstance().unloadAmmoOperation(plane);

                }
                else if (!plane.isTanked()) AirportManager.getInstance().fuel(plane);
                else if (!plane.isAfterTechnicalInspection()) AirportManager.getInstance().inspectTechnically(plane);
                else
                {
                    AirportManager.getInstance().placeOnRunway(plane);
                    break;
                }

            }

            foreach(Runway runway in AirportManager.getInstance().getRunwayList())
            {
                if (runway.getPlane() == null) continue;
                Plane plane = runway.getPlane();

                if (!plane.isAutoGenerated()) continue;

                if(plane.getCurrentState() == State.OnRunwayAftLanding)
                {
                    if (!plane.isEmpty() && plane is PassengerPlane)
                    {
                        AirportManager.getInstance().unloadPeopleOperation(plane);
                    }
                    else
                    {
                        AirportManager.getInstance().placeInHangar(plane);
                    }
                }
                else if(plane.getCurrentState() == State.OnRunwayBefTakeoff)
                {
                    AirportManager.getInstance().takeOff(plane);
                }
            }

            foreach(Plane plane in AirportManager.getInstance().getAirspace().getList())
            {
                if (!plane.isAutoGenerated()) continue;

                if(plane.isEmpty())
                {
                    AirportManager.getInstance().sendAway(plane);
                    break;
                }
                else
                {
                    AirportManager.getInstance().land(plane);
                    break;
                }
            }
            

            return true;
        }

        public override Plane getPlane()
        {
            return null;
        }

        public override void stop()
        {

        }
    }
}
